
const express = require('express');
const bodyParser = require('body-parser');
const path = require('path');
const multer = require('multer');
const cors = require('cors');
const fs    = require('fs');

const app = express();

const loginRouter         = require('./routes/login');
const registerRouter      = require('./routes/register');

const fileuploadRouter    = require('./routes/fileupload');
const inhouseuploadRouter = require('./routes/inhouseupload');
//const diseaseuploadRouter = require('./routes/diseaseupload');
// 병리



// 진검
const patientListRouter     = require('./routes/patientlist');
const filteredTSVListRouter = require('./routes/filteredTSVlist');

const mutationInfoRouter        = require('./routes/mutationInfoList');
const geneExistRouter       = require('./routes/geneExist');
const addGeneInfoRouter     = require('./routes/addGeneToMutation');

const commentsRouter        = require('./routes/commentsRouter');
const artifactsRouter       = require('./routes/artifactsRouter');
const benignRouter          = require('./routes/benignRouter');
const commentsCountRouter   = require('./routes/commentsCountRouter');
const artifactsCountRouter  = require('./routes/artifactsCountRouter');
const benignCountRouter     = require('./routes/benignCountRouter');
const artifactsInsertRouter = require('./routes/artifactsInsertRouter');
const benignInsertRouter    = require('./routes/benignInsertRouter');

const geneCommentRouter     = require('./routes/geneCommentRouter');
const savedFilePathRouter   = require('./routes/savedFilePathRouter');
//
const mutationRouter        = require('./routes/mutationRouter');

const searchpatientRouter   = require('./routes/searchRouter');

// middleware
app.use(express.static(path.join(__dirname, 'dist')));
app.use(cors());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false}));
 
app.use('/fileUpload', fileuploadRouter);
app.use('/inhouseUplad', inhouseuploadRouter);
// app.use('/diseaseUpload', diseaseuploadRouter);

// 로그인
app.use('/login', loginRouter);
// 등록
app.use('/register', registerRouter);


// 환자목록 가져오기
app.use('/patients', patientListRouter);
//검사자 필터링된 리스트 가겨오기
app.use('/filteredTSV', filteredTSVListRouter);

// 유전체 와 nucleotide_change(coding) 로 mutation 있는지 알아보기
app.use('/findGeneExist', geneExistRouter);
 
// 유전체 와 nucleotide_change(coding)가 없을때 추가하기
app.use('/addGeneInfo', addGeneInfoRouter);
// 유전체 와 nucleotide_change(coding) 로 mutation 레코드에서 최신정보 1개 가져오기
app.use('/mutationInfo', mutationInfoRouter);
//유전체 와 nucleotide_change(coding) 가 2개 있는경우 두개중 1개가 있으면 mutation 레코드에서 최신정보 1개 가져오기

// 유전체 정보로 comments 정보 가져오기
app.use('/comments', commentsRouter);
app.use('/commentsCount', commentsCountRouter);
// 유전체 정보로 artifacts 정보 가져오기
app.use('/artifacts', artifactsRouter);
app.use('/artifactsCount', artifactsCountRouter);
app.use('/artifactsInsert',artifactsInsertRouter);
// 유전체 정보로 benign 정보 가져오기
app.use('/benign', benignRouter);
app.use('/benignCount', benignCountRouter);
app.use('/benignInsert',benignInsertRouter);

// 유전체 정보로 comment 레코드에서 정보 가져오기
app.use('/findGeneComment', geneCommentRouter);

// 화일명과 검체번호로 저장된 경로 알아내기
app.use('/getSavedFilePath', savedFilePathRouter);


//검사자 날자별 검색
app.use('/searchpatient', searchpatientRouter);

// In-House 등록/수정/삭제
// Mutation
app.use('/mutation', mutationRouter);


app.use('/tests', function(req, res, next) {
   // console.log('Time: %d', Date.now());
    console.log(req);
	res.json(req.body);
    next();
  });

app.use('/makefile', function(req,res,next) { 
	console.log(req.body);
      const camerID      = req.body.camerID;
      const deviceModel  = req.body.deviceModel;
      const serialNo     = req.body.serialNo;
      const installDate  = req.body.installDate;
      const useyn        = req.body.installDate;
      const siteID       = req.body.siteID;
      const blockID      = req.body.blockID;
      const zoneID       = req.body.zoneID;
      const entryID      = req.body.entryID;
      const localIP      = req.body.localIP;
      const localPort    = req.body.localPort;
      const netMask      = req.body.netMask;
      const gateway      = req.body.gateway;
      const hostIP       = req.body.hostIP;
      const hostPort     = req.body.hostPort;
      const url          = req.body.url; 
      const userID       = req.body.userID;
      const password     = req.body.password;
      const mqttHostIP   = req.body.mqttHostIP;
      const mqttUserID   = req.body.mqttUserID;
      const mqttPassword = req.body.mqttPassword;
      const topic        = req.body.topic;
      const scale        = req.body.scale;
      const margin       = req.body.margin;

        const contents = `
 camerID:    ${camerID}    
 deviceModel: ${deviceModel}   
 serialNo:    ${serialNo}      
 installDate: ${installDate}  
 useyn:       ${useyn}
 siteID:      ${siteID}         
 blockID:     ${blockID}    
 zoneID:      ${zoneID}      
 entryID:     ${entryID}      
 localIP:     ${localIP}     
 localPort:   ${localPort}    
 netMask:     ${netMask}     
 gateway:     ${gateway}   
 hostIP:      ${hostIP}    
 hostPort:    ${hostPort}     
 url:         ${url}      
 userID:      ${userID}       
 password:    ${password}     
 mqttHostIP:  ${mqttHostIP}    
 mqttUserID:  ${mqttUserID}    
 mqttPassword: ${mqttPassword}  
 topic:       ${topic}        
 scale:       ${scale}       
 margin:      ${margin}`;    
 

      fs.writeFile('./uploads/ckt.txt',contents,function(err) {
           if (err) throw err;
          
	  });

  res.json({message: '화일을 만들었습니다....'});

});

const port = process.env.PORT || 3000;

app.listen(port, (req,res)=> {
   console.log('Running Server 3000 ....');
  });
