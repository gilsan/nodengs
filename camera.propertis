const { exec } = require('child_process');
const express = require('express');
const bodyParser = require('body-parser');
const path = require('path');

const cors = require('cors');
const fs    = require('fs');

const app = express();

app.use(cors());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false}));

app.use('/readfile',function(req,res,next) {
        fs.readFile('./uploads/camera.properties','utf8',function(err,data) {
              console.log(data);
              res.json(data);
        });
});


app.use('/reboot', function(req,res,next) {
  const scripts = exec('sh /usr/local/src/ckt/reboot.sh',
          (error, stdout, stderr) => {
                  res.json({message: '리부팅 실행 했습니다.'});
                  console.log(stdout);
                  console.log(stderr);
                  if (error !== null) {
                          console.log('error');
                           }
          });


});

app.use('/makefile', function(req,res,next) {
 console.log(req.body);
 const cameraID           = req.body.cameraID;
const cameraModel         = req.body.cameraModel;
const cameraserialNum     = req.body.cameraserialNum;
const cameraInstallDate   = req.body.cameraInstallDate;
const cameraUseyn         = req.body.cameraUseyn;
const siteID              = req.body.siteID;
const blockID             = req.body.blockID;
const zoneID              = req.body.zoneID;
const entryID             = req.body.entryID;
const localIP             = req.body.localIP;
const localPortIr         = req.body.localPortIr;
const localPortRtsp       = req.body.localPortRtsp;
const netmask             = req.body.netmask;
const gateway             = req.body.gateway;
const hostIpRecon         = req.body.hostIpRecon;
const hostPortRecon       = req.body.hostPortRecon;
const hostIpCloud         = req.body.hostIpCloud;
const hostPortCloud       = req.body.hostPortCloud;
const hostIpMqtt          = req.body.hostIpMqtt;
const hostportMqtt        = req.body.hostportMqtt;
const mqttUserId          = req.body.mqttUserId;
const mqttPassword        = req.body.mqttPassword;
const mqttPubTopic        = req.body.mqttPubTopic;
const flagOpMode          = req.body.flagOpMode;
const flagFaceTemperature = req.body.flagFaceTemperature;
const flagFaceMask        = req.body.flagFaceMask;
const flagRecongnition    = req.body.flagRecongnition;
const flagLiveness        = req.body.flagLiveness;
const threshold           = req.body.threshold;
const iou_threshold       = req.body.iou_threshold;
const marginX             = req.body.marginX;
const marginY             = req.body.marginY;
const scaleX              = req.body.scaleX;
const scaleY              = req.body.scaleY;
const  faceMinSize         = req.body.faceMinSize;

  const contents = `[CameraBaseInfo]
cameraID=${cameraID}
cameraModel=${cameraModel}
cameraserialNum=${cameraserialNum}
cameraInstallDate=${cameraInstallDate}
cameraUseyn=${cameraUseyn}
[CameraLocaionInfo]
siteID=${siteID}
blockID=${blockID}
zoneID=${zoneID}
[CameraNetworkInfo]
localIP=${localIP}
localPortIr=${localPortIr}
locallPortRtsp=${localPortRtsp}
netmask=${netmask}
gateway=${gateway}
[CameraHostInfo]
hostIrRecon=${hostIpRecon}
hostPortRecon=${hostPortRecon}
hostIpCloud=${hostIpCloud}
hostPortCloud=${hostPortCloud}
hostIpMqtt=${hostIpMqtt}
hostportMqtt=${hostportMqtt}
mqttUserId=${mqttUserId}
mqttPassword=${mqttPassword}
mqttPubTopic=${mqttPubTopic}
[CamerParameterInfo]
flagOpMode=${flagOpMode}
flagFaceTemperature=${flagFaceTemperature}
flagFaceMask=${flagFaceMask}
flagRecongnition=${flagRecongnition}
flagLiveness=${flagLiveness}
threshold=${threshold}
iou_threshold=${iou_threshold}
#2.set margine(IR<-->RGB)
marginX=${marginX}
marginY=${marginY}
scaleX=${scaleX}
scaleY=${scaleY}
#3.face recognition min size 40 ~ 80(increment10)
faceMinSize=${faceMinSize}`;


     fs.writeFile('./uploads/camera.properties.txt',contents,function(err) {
          if (err) throw err;

     });

     fs.writeFile('./system.ini', 'uploads/ckt.txt', function(err) {
          if (err) throw err;
     });

 res.json({message: '화일을 만들었습니다....'});

});